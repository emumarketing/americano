{{dataname}}Model = require('../../models/{{dataname}}Model')
PageHelper = require('../../lib/pagination_helper')

module.exports = {{dataname}}Mixin =

  action_{{lowercase dataname}}_index: (req, res, cb) =>
    page = if req.params.page then req.params.page else 1
    ph = new PageHelper(page) 
    ph.render {{dataname}}Model, {}, (err, pagination) ->
      res.render "{{lowercase resource}}/{{lowercase dataname}}/index", {errors: err, pagination: pagination}
      if cb then cb()
      return
    return

  action_{{lowercase dataname}}_create: (req, res, cb) =>
    res.render "{{lowercase resource}}/{{lowercase dataname}}/create", {item: {}, action: "/{{lowercase resource}}/{{lowercase dataname}}/new"}
    if cb then cb()
    return

  action_{{lowercase dataname}}_new: (req, res, cb) =>
    params = req.body
    {{dataname}} = new {{dataname}}Model{{#eachProp data}}
      {{key}}: params.{{key}},{{/eachProp}}
      slug: params.slug,

    {{dataname}}.save (err) ->
      if (err)
        res.render "{{lowercase resource}}/{{lowercase dataname}}/create", {item: params, errors: err, action: "/{{lowercase resource}}/{{lowercase dataname}}/new"}
      else
        res.redirect "/{{lowercase resource}}/{{lowercase dataname}}"
      if cb then cb()
    return

  action_{{lowercase dataname}}_edit: (req, res, cb) =>
    slug = req.params.slug
    {{dataname}}Model.findOne {"slug": slug}, (err, item) ->
      if !err and item?
        res.render "{{lowercase resource}}/{{lowercase dataname}}/edit", {item: item, errors: err, action: "/{{lowercase resource}}/{{lowercase dataname}}/update/#{item.slug}"}
      else
        res.send "Not a Valid {{dataname}} To Edit"
      if cb then cb()
    return

  action_{{lowercase dataname}}_update: (req, res, cb) =>
    slug = req.params.slug
    {{dataname}}Model.findOne {"slug", slug}, (err, item) ->{{#eachProp data}}
      item.{{key}} = req.body.{{key}}{{/eachProp}}
      old_slug = item.slug
      item.slug = req.body.slug
      item.save (err) ->
        if (!err)
          res.redirect "/{{lowercase resource}}/{{lowercase dataname}}"
        else
          item.slug = old_slug
          res.render "{{lowercase resource}}/{{lowercase dataname}}/edit", {item: item, errors: err, action: "/{{lowercase resource}}/{{lowercase dataname}}/update/#{old_slug}"}
        if cb then cb()

  action_{{lowercase dataname}}_search: (req, res, cb) =>
    input_search = req.query.search
    page = if req.params.page then req.params.page else 1
    ph = new PageHelper(page)
    ph.render {{dataname}}Model, {slug: { $regex : ".*#{input_search}.*", $options: 'i' }}, (err, pagination) ->
      pagination.paged_route(pagination, "search")
      pagination.get_inputs(pagination, {search: input_search})
      res.render "{{lowercase resource}}/{{lowercase dataname}}/search", {errors: err, pagination: pagination}
      if cb then cb()
      return
    return


