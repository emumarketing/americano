Db = require('./db')
Crypto = require('crypto')

UsersModel = new Db.Schema
  email: String,
  hashed_password: String,
  salt: String,
  username:
    type: String,
    unique: true,

validatePresenceOf = (value) ->
  return value and value.length

UsersModel.path('email').validate (v) ->

UsersModel.path('hashed_password').validate (v) ->

UsersModel.path('salt').validate (v) ->

UsersModel.path('username').validate (v) ->
 
UsersModel.virtual('password')
  .set (password) ->
    @_password = password
    @salt = @makeSalt()
    @hashed_password = @encryptPassword(password)
  .get ->
    return @_password

UsersModel.method 'authenticate', (plainText) ->
  return @encryptPassword(plainText) == @hashed_password

UsersModel.method 'makeSalt', ->
  return Math.round((new Date().valueOf() * Math.random())) + ''

UsersModel.method 'encryptPassword', (password) ->
  return Crypto.createHmac('sha1', @salt).update(password).digest('hex')

UsersModel.pre 'save', (next) ->
  if !validatePresenceOf(@password)
    next(new Error('Invalid Password'))
  else
    next()

module.exports = Db.Model.register 'UsersModel', UsersModel
